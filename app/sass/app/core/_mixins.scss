// #############################
//   Base | Mixins
// #############################

@mixin clearfix($direct: after){
	@if $direct == after or $direct == before {
		&:#{$direct} {
			content: "";
			display: block;
			width: 100%;
			clear: both;
		}
	} @else {
		clear: both;
	}
}

@mixin show($height: auto, $padding: false, $max: none, $display: false){
    @if $height != false {
		height: $height;
	}
    visibility: visible;
    opacity: 1;
	max-height: $max;
	@if $padding != false {
		padding: $padding;
	}
	@if $display != false {
		display: $display;
	}
}

@mixin hide($height: false, $padding: false, $max: 0px, $display: false){
    @if $height != false {
		height: $height;
	}
    visibility: hidden;
    opacity: 0;
	max-height: 0px;
	@if $padding != false {
		padding: $padding;
	}
	@if $display != false {
		display: $display;
	}
}

// #############################
//   Alignment
// #############################

@mixin horizontal-align($position: relative){
    position: $position;
    top: 50%;
    -webkit-transform: translateX(-50%);
    -ms-transform: translateX(-50%);
    transform: translateX(-50%); 
}

@mixin vertical-align($position: relative){
    position: $position;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%); 
}

@mixin center($types ...){
    $center-map: (
        "block",
        "inline",
        "both",
        "horizontal",
        "vertical"
    );
    
    $used: ();
    @each $type in $types {
        @if not contains($center-map, $type) {
            @error "#{$type} is not a valid center type.";
        } @else if contains($used, $type) == true {
            @error "#{$type} has already been specified once.";
        } @else if $type == "both" {
            @include position(absolute 50% 50%);
            @include transform(translate(-50%, -50%));
            $used: append($used, "both");
        } @else if $type == "horizontal" {
            @include position(absolute 50% 0);
            @include transform(translateX(-50%));
        } @else if $type == "vertical" {
            @include position(absolute 0 50%);
            @include transform(translateY(-50%));
        } @else if $type == "block" {
            display: block;
            margin-left: auto;
            margin-right: auto;
        } @else if($type == "inline"){
            text-align: center;
        } @else {
            @error "Your center input '#{$type}' is malformed.";
        }
    }
}  

// #############################
//  Compatibility
// #############################

@mixin border-radius($value){
    -webkit-border-radius: $value;
    -moz-border-radius: $value;
    border-radius: $value;
}

@mixin transform($value){
    -webkit-transform: $value;
	-moz-transform: $value;
	-ms-transform: $value;
	-o-transform: $value;
	transform: $value;
}

@mixin transition($value...){
	@if length($value) != 0 {
		@debug "its a list";
		$list: $value;
		$value: "";
		@each $attr in $list {
			@if index($list, $attr) == 1 {
				$value: #{$attr};
			} @else {
				$value: #{$value}, #{$attr};
			}
		}	
	} @else if length($value) == 1{
		@debug "its a single value";
		$value: nth($value, 1);
	} @else {
		$value: $transition;
	}
	@debug $transition;
	@debug $value;

	transition: #{$value};
	-o-transition: #{$value};
	-ie-transition: #{$value};
	-moz-transition: #{$value};
	-webkit-transition: #{$value};

    
}

// #############################
//  CSS Shorthand
// #############################

@mixin size($width, $height: $width){
    width: $width;
	height: $height;
}

@mixin position($position){
    $position-map: (
        "absolute",
        "fixed",
        "relative",
        "static",
    );
    
    @if(length($position) > 0){
        $type: nth($position, 1);
		
		@if(not contains($position-map, $type)){
			@error "#{$type} is not a valid position type.";
		} @else {
			$top: 0;
			$right: 0;
			$bottom: 0;
			$left: 0;

			$elements: length($position);
			@if($elements > 1){
				@if($elements - 1 == 2) {
					// top left
					$top: nth($position, 2);
					$left: nth($position, 3);
				} @else if($elements - 1 == 4) {
					// top right bottom left   
					$top: nth($position, 2);
					$right: nth($position, 3);
					$bottom: nth($position, 4);
					$left: nth($position, 5);
				} @else {
					@error "Position values must be in 'top left' or 'top right bottom left' formats.";
				}
			}
			
			position: $type;
			@if(not unitless($top))    { top: $top; }
			@if(not unitless($right))  { right: $right; }
			@if(not unitless($bottom)) { bottom: $bottom; }
			@if(not unitless($left))   { left: $left; }
		}
	}    
}

// #############################
//   Design
// #############################

@mixin triangle($direction: "up", $color: $black, $border-size: 8px){
    @if(direction == "up")     { @include triangle-up($color, $border-size)    };
    @if(direction == "right")  { @include triangle-right($color, $border-size) };
    @if(direction == "down")   { @include triangle-down($color, $border-size)  };
    @if(direction == "left")   { @include triangle-left($color, $border-size)  };
}

@mixin triangle-up($color: $black, $border-size: 8px){
    border-bottom:  solid $border-size $color;
    border-left:    solid $border-size transparent;
    border-right:   solid $border-size transparent;
}

@mixin triangle-right($color: $black, $border-size: 8px){
    border-left:     solid $border-size $color;
    border-top:      solid $border-size transparent;
    border-bottom:   solid $border-size transparent;
}

@mixin triangle-down($color: $black, $border-size: 8px){
    border-top:     solid $border-size $color;
    border-left:    solid $border-size transparent;
    border-right:   solid $border-size transparent;
}

@mixin triangle-left($color: $black, $border-size: 8px){
    border-right:    solid $border-size $color;
    border-top:      solid $border-size transparent;
    border-bottom:   solid $border-size transparent;
}

@mixin repeat-rule($width: 100%, $margin-vert: 15px, $margin-side: auto, $include: false){
    $margin: $margin-vert $margin-side;
    
    @if $include == true {
        &:before {
            display: block;
            content: "";
            width: $width;
            border-bottom: solid 1px lighten($grey, $b20);
            margin: $margin; 
        }   
    } @else {
        & + &:before {
            display: block;
            content: "";
            width: $width;
            border-bottom: solid 1px lighten($grey, $b20);
            margin: $margin; 
        }   
    }
}

// #############################
//  Strings
// #############################

@function explode($string,$dem) {
    $list: ();
    $sum: str-length($string);
 
    for $i from 1 through $sum {
        $str: str-index($string,$dem);
 
        @if str-length($string) >= 1 and $str == null {
            $list: append($list,$string);
            $string: '';
        }
 
        @if type-of($str) == number {
            $each: str-slice($string,0,($str - 1));
            $list: append($list,$each);
            $string: str-slice($string,($str + 1), $sum);
        }
    }
 
    @return $list;
}

// #############################
//  Maps
// #############################

@function map-depth($map) {
	$level: 1;

	@each $key, $value in $map {
		@if type-of($value) == "map" {
			$level: max(map-depth($value) + 1, $level);
		}
	}
	@return $level;
}

@function map-deep-get($map, $keys...) {
	@each $key in $keys {
		$map: map-get($map, $key);
	}
	@return $map;
}

@function map-deep-set($map, $keys.../*, $value */) {
	$map-list: ($map,);
	$result: null;

	@if length($keys) == 2 {
		@return map-merge($map, (nth($keys, 1): nth($keys, -1)));
	}

	@for $i from 1 through length($keys) - 2 {
		$map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
	}

	@for $i from length($map-list) through 1 {
		$result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
	}

	@return $result;
}

@function map-extend($map, $maps.../*, $deep */) {
	$last: nth($maps, -1);
	$deep: $last == true;
	$max: if($deep, length($maps) - 1, length($maps));

	@for $i from 1 through $max {
		$current: nth($maps, $i);

		@if not $deep {
			$map: map-merge($map, $current);
		} @else {
			@each $key, $value in $current {

			@if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
				$value: map-extend(map-get($map, $key), $value, true);
			}

			$map: map-merge($map, ($key: $value));
			}
		}
	}

	@return $map;
}

@function map-get-next($map, $key, $fallback: false) {
	@if type_of($map) == map {
		@if map_has_key($map, $key) {
			$i: 0;
			$key-index: false;

			@each $map-key, $map-value in $map {
				$i: $i + 1;
				@if $map-key == $key {
					$key-index: $i;
				}
				
				@if $i == $key-index + 1 {
					@return $map-value;
				}
				
				@if $i == length($map) {
					@return $fallback;
				}
			}
			@warn 'No next map item for key #{$key}';
			@return $fallback;
		}
		@warn 'No valid key #{$key} in map';
		@return $fallback;
	}
	@warn 'No valid map';
	@return $fallback;
}

@function map-has-keys($map, $keys...) {
	@each $key in $keys {
		@if not map-has-key($map, $key) {
			@return false;
		}
	}
	@return true;
}

@function map-has-nested-keys($map, $keys...) {
	@each $key in $keys {
		@if not map-has-key($map, $key) {
			@return false;
		}
		$map: map-get($map, $key);
	}
	@return true;
}

@function map-reverse($map) {
    $result: null;

    @if type-of($map) == "map" {
        $keys: map-keys($map);
        $map-reversed: ();
        
        @for $i from length($keys) through 1 {
            $map-reversed: map-merge(
                $map-reversed,
                (nth($keys, $i): map-get($map, nth($keys, $i)))
            );
        }

        @if type-of($map-reversed) == "map" {
            $result: $map-reversed;
        } @else {
            @warn 'There was an error reversing the order of "#{$map}"';
        }
    } @else {
        @warn '"#{$map}" is not a valid map';
    }

    @return $result;
}

@function map-set($map, $key, $value) {
	$new: ($key: $value);
	@return map-merge($map, $new);
}

@function map-zip($keys, $values) {
	$l-keys: length($keys);
	$l-values: length($values);
	$min: min($l-keys, $l-values);
	$map: ();

	@if $l-keys != $l-values {
		@warn "There are #{$l-keys} key(s) for #{$l-values} value(s) in the map for `map-zip`. Resulting map will only have #{$min} pairs.";
	}

	@if $min == 0 {
		@return $map;
	}

	@for $i from 1 through $min {
		$map: map-merge($map, (nth($keys, $i): nth($values, $i)));
	}

	@return $map;
}
